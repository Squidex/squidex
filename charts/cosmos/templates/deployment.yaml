apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: {{ include "cosmos.fullname" . }}
  labels:
    app: {{ include "cosmos.fullname" . }}   
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ include "cosmos.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "cosmos.fullname" . }}
    spec:
      {{- if .Values.init_containers }}

      serviceAccountName: {{ .Values.ServiceAccountName }}
      initContainers:

###################################
# Vault init container
###################################
      - name: vault-agent-auth
        image: 512544833523.dkr.ecr.eu-west-1.amazonaws.com/base-image/vault
   
        volumeMounts:
          - name: conf-vol
            mountPath: /etc/vault
          - name: vault-token
            mountPath: /home/vault
          - name: vault-cert
            mountPath: /home/vault-cert/vault.crt
            subPath: "vault.crt"
   
        env:
          - name: VAULT_ADDR
            value: {{ .Values.VaultAddress }}
          - name: VAULT_CACERT
            value: /home/vault-cert/vault.crt
   
        # Run the Vault agent
        args:
          [
            "agent",
            "-config=/etc/vault/vault-agent-config.hcl",
            #"-log-level=debug",
          ]

###################################
# Consul Template init container
###################################
      - name: consul-template
        image: 512544833523.dkr.ecr.eu-west-1.amazonaws.com/base-image/consul-template:alpine
        imagePullPolicy: Always
   
        volumeMounts:
          - name: vault-token
            mountPath: /home/vault
          - name: conf-vol
            mountPath: /etc/consul-template
          - name: shared-data
            mountPath: /etc/secrets
          - name: vault-cert
            mountPath: /home/vault-cert/vault.crt
            subPath: "vault.crt"
   
        env:
          - name: HOME
            value: /home/vault
          - name: VAULT_ADDR
            value: {{ .Values.VaultAddress }}
          - name: VAULT_CACERT
            value: /home/vault-cert/vault.crt
   
        # Consul-Template looks in $HOME/.vault-token, $VAULT_TOKEN, or -vault-token (via CLI)
        args:
          [
            "-config=/etc/consul-template/consul-template-config.hcl",
            "-once",
            #"-log-level=debug",
          ] 
      {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.container.port }}
              protocol: TCP
          env:
{{- range $name, $value := .Values.env.open }}
{{- if not (empty $value) }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
{{- end }}
{{- end }}
          volumeMounts:
          - name: cosmos-vol
            mountPath: "/app/conf" 

          - name: shared-data
            mountPath: "/app/secrets"
###################################
# Volumes 
###################################  
      volumes:
      - name: cosmos-vol
        configMap:
          name: {{ .Values.application_configmap.name }}
          items:
            - key: {{ .Values.environment }}_appsettings.json
              path: appsettings.{{ .Values.environment }}.json

      - name: conf-vol
        configMap:
          name: {{ .Values.configmap.name }}
          items:
            - key: vault-agent-config.hcl
              path: vault-agent-config.hcl
   
            - key: consul-template-config.hcl
              path: consul-template-config.hcl


      - name: vault-cert
        secret:
          secretName: {{ .Values.vault_secrets.name }}
          items:
            - key: vault.crt
              path: vault.crt

      - name: vault-token
        emptyDir:
          medium: Memory
   
      - name: shared-data
        emptyDir: {}
