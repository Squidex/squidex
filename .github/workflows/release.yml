name: Release
concurrency: release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.3.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: Cache Docker layers
        uses: actions/cache@v3.0.11
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: BUILD
        uses: docker/build-push-action@v3.2.0
        with:
          push: false
          load: true
          tags: squidex-tmp
          build-args: "SQUIDEX__VERSION=${{ env.GITHUB_REF_SLUG }}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Export Image
        run: docker save squidex-tmp | gzip > squidex-tmp.tar.gz

      - name: Save Image to Cache
        uses: actions/cache@v3.0.11
        with:
          path: squidex-tmp.tar.gz
          key: squidex-release-image-${{ github.sha }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.3.2

      - name: Get Image From Cache
        uses: actions/cache@v3.0.11
        with:
          path: squidex-tmp.tar.gz
          key: squidex-release-image-${{ github.sha }}

      - name: Load Image
        run: docker load < squidex-tmp.tar.gz

      - name: Replace Image Name1
        uses: mikefarah/yq@v4.28.2
        with:
          cmd: yq e '.services.squidex1.image = "squidex-tmp"' -i backend/tests/docker-compose.yml

      - name: Replace Image Name2
        uses: mikefarah/yq@v4.28.2
        with:
          cmd: yq e '.services.squidex2.image = "squidex-tmp"' -i backend/tests/docker-compose.yml

      - name: Replace Image Name3
        uses: mikefarah/yq@v4.28.2
        with:
          cmd: yq e '.services.squidex3.image = "squidex-tmp"' -i backend/tests/docker-compose.yml

      - name: Start Test
        run: docker-compose up -d
        working-directory: backend/tests

      - name: RUN TEST
        uses: kohlerdominik/docker-run-action@v1.1.0
        with:
          image: squidex/build:7
          environment: |
            CONFIG__BACKUPURL=http://localhost:5000
            CONFIG__WAIT=60
            CONFIG__SERVER__URL=http://localhost:8080
            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher
          default_network: host
          options: --name test1
          volumes: ${{ github.workspace }}:/src
          run: dotnet test /src/backend/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated

      - name: RUN TEST on path
        uses: kohlerdominik/docker-run-action@v1.1.0
        with:
          image: squidex/build:7
          environment: |
            CONFIG__BACKUPURL=http://localhost:5000
            CONFIG__WAIT=60
            CONFIG__SERVER__URL=http://localhost:8081/squidex
            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher
          default_network: host
          options: --name test2
          volumes: ${{ github.workspace }}:/src
          run: dotnet test /src/backend/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated

      - name: RUN TEST with dedicated collections
        uses: kohlerdominik/docker-run-action@v1.1.0
        with:
          image: squidex/build:7
          environment: |
            CONFIG__BACKUPURL=http://localhost:5000
            CONFIG__WAIT=60
            CONFIG__SERVER__URL=http://localhost:8082
            WEBHOOKCATCHER__HOST__ENDPOINT=webhookcatcher
          default_network: host
          options: --name test3
          volumes: ${{ github.workspace }}:/src
          run: dotnet test /src/backend/tools/TestSuite/TestSuite.ApiTests/TestSuite.ApiTests.csproj --filter Category!=NotAutomated
       
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2.2.1
        with:
         images: 'squidex-tmp,squidex/resizer,squidex/caddy-proxy-path'
         tail: '100'

      - name: Cleanup Test
        if: always()
        run: docker-compose down
        working-directory: backend/tests

  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.3.2

      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Major Version
        id: version
        uses: rishabhgupta/split-by@v1.0.1
        with:
          string: "${{ env.GITHUB_REF_SLUG }}"
          split-by: "."

      - name: Check Tag
        id: normal-version
        run: |
          if [[ ${{ env.GITHUB_REF_SLUG }} =~ ^[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=match::true
          fi

      - name: Get Image From Cache
        uses: actions/cache@v3.0.11
        with:
          path: squidex-tmp.tar.gz
          key: squidex-release-image-${{ github.sha }}

      - name: Load Image
        run: docker load < squidex-tmp.tar.gz

      - name: Rename Tags
        run: |
          docker tag squidex-tmp squidex/squidex:latest
          docker tag squidex-tmp squidex/squidex:${{ env.GITHUB_REF_SLUG }}
          docker tag squidex-tmp squidex/squidex:${{ steps.version.outputs._0 }}

      - name: Push Version
        run: |
          docker push squidex/squidex:latest
          docker push squidex/squidex:${{ env.GITHUB_REF_SLUG }}
          docker push squidex/squidex:${{ steps.version.outputs._0 }}

      - name: Push Latest
        run: |
          docker push squidex/squidex:latest
        if: steps.normal-version.outputs.match == 'true'

  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4.3.2

      - name: Get Image From Cache
        uses: actions/cache@v3.0.11
        with:
          path: squidex-tmp.tar.gz
          key: squidex-release-image-${{ github.sha }}

      - name: Load Image
        run: docker load < squidex-tmp.tar.gz

      - name: Make directories
        run: sudo mkdir /build /release

      - name: Create container
        run: docker create --name squidex-container squidex-tmp:latest

      - name: Get binaries
        run: sudo docker cp squidex-container:/app/. /build

      - name: ZIP Binaries
        run: sudo zip -r /release/binaries.zip .
        working-directory: /build

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2.2.0
        with:
          version: ${{ env.GITHUB_REF_SLUG }}
          path: ./CHANGELOG.md

      - name: Publish Binaries
        uses: ncipollo/release-action@v1.11.1
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "/release/binaries.zip"
          body: ${{ steps.changelog_reader.outputs.changes }}
          name: ${{ env.GITHUB_REF_SLUG }}
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Binaries
        if: always()
        run: docker rm squidex-container
