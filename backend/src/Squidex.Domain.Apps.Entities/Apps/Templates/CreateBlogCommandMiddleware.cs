// ==========================================================================
//  Squidex Headless CMS
// ==========================================================================
//  Copyright (c) Squidex UG (haftungsbeschraenkt)
//  All rights reserved. Licensed under the MIT license.
// ==========================================================================

using System;
using System.Threading.Tasks;
using Squidex.Domain.Apps.Core.Contents;
using Squidex.Domain.Apps.Entities.Apps.Commands;
using Squidex.Domain.Apps.Entities.Apps.Templates.Builders;
using Squidex.Domain.Apps.Entities.Contents.Commands;
using Squidex.Infrastructure;
using Squidex.Infrastructure.Commands;

namespace Squidex.Domain.Apps.Entities.Apps.Templates
{
    public sealed class CreateBlogCommandMiddleware : ICommandMiddleware
    {
        private const string TemplateName = "Blog";

        public async Task HandleAsync(CommandContext context, Func<Task> next)
        {
            if (context.IsCompleted && context.Command is CreateApp createApp && IsRightTemplate(createApp))
            {
                var appId = NamedId.Of(createApp.AppId, createApp.Name);

                var publish = new Func<ICommand, Task>(command =>
                {
                    if (command is IAppCommand appCommand)
                    {
                        appCommand.AppId = appId;
                    }

                    return context.CommandBus.PublishAsync(command);
                });

                await Task.WhenAll(
                    CreatePagesAsync(publish),
                    CreatePostsAsync(publish));
            }

            await next();
        }

        private static bool IsRightTemplate(CreateApp createApp)
        {
            return string.Equals(createApp.Template, TemplateName, StringComparison.OrdinalIgnoreCase);
        }

        private static async Task CreatePostsAsync(Func<ICommand, Task> publish)
        {
            var postsId = await CreatePostsSchemaAsync(publish);

            await publish(new CreateContent
            {
                SchemaId = postsId,
                Data =
                    new NamedContentData()
                        .AddField("title",
                            new ContentFieldData()
                                .AddValue("My first post with Squidex"))
                        .AddField("text",
                            new ContentFieldData()
                                .AddValue("Just created a blog with Squidex. I love it!")),
                Publish = true
            });
        }

        private static async Task CreatePagesAsync(Func<ICommand, Task> publish)
        {
            var pagesId = await CreatePagesSchemaAsync(publish);

            await publish(new CreateContent
            {
                SchemaId = pagesId,
                Data =
                    new NamedContentData()
                        .AddField("title",
                            new ContentFieldData()
                                .AddValue("About Me"))
                        .AddField("text",
                            new ContentFieldData()
                                .AddValue("I love Squidex and SciFi!")),
                Publish = true
            });
        }

        private static async Task<NamedId<Guid>> CreatePostsSchemaAsync(Func<ICommand, Task> publish)
        {
            var schema =
                SchemaBuilder.Create("Posts")
                    .AddString("Title", f => f
                        .Length(100)
                        .Required()
                        .ShowInList()
                        .Hints("The title of the post."))
                    .AddString("Text", f => f
                        .AsRichText()
                        .Length(100)
                        .Required()
                        .Hints("The text of the post."))
                    .AddString("Slug", f => f
                        .Disabled()
                        .Label("Slug (Autogenerated)")
                        .Hints("Autogenerated slug that can be used to identity the post."))
                    .WithScripts(DefaultScripts.GenerateSlug)
                    .Build();

            await publish(schema);

            return NamedId.Of(schema.SchemaId, schema.Name);
        }

        private static async Task<NamedId<Guid>> CreatePagesSchemaAsync(Func<ICommand, Task> publish)
        {
            var schema =
                SchemaBuilder.Create("Pages")
                    .AddString("Title", f => f
                        .Length(100)
                        .Required()
                        .ShowInList()
                        .Hints("The title of the page."))
                    .AddString("Text", f => f
                        .AsRichText()
                        .Length(100)
                        .Required()
                        .Hints("The text of the page."))
                    .AddString("Slug", f => f
                        .Disabled()
                        .Label("Slug (Autogenerated)")
                        .Hints("Autogenerated slug that can be used to identity the page."))
                    .WithScripts(DefaultScripts.GenerateSlug)
                    .Build();

            await publish(schema);

            return NamedId.Of(schema.SchemaId, schema.Name);
        }
    }
}